apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion appCompileSdkVersion
    buildToolsVersion appBuildToolsVersion

    signingConfigs {
        releaseConfig {
            try {
                keyAlias 'keydata.keystore'
                keyPassword KEY_PASSWORD
                storeFile file('../misc/keydata.keystore.jks')
                storePassword STORE_PASSWORD
            } catch (Exception ex) {
                throw new InvalidUserDataException(ex.getMessage())
            }
        }
    }

    defaultConfig {
        applicationId "com.rc.designpatterndemo"

        minSdkVersion appMinSdkVersion
        targetSdkVersion appTargetSdkVersion
        versionCode appVersionCode
        versionName appVersionName

        vectorDrawables.useSupportLibrary = true

        // define your base Applications name here
        resValue 'string', 'app_name', 'DesignPatternDemo'
    }

    buildTypes {
        debug {
            shrinkResources false
            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            shrinkResources true
            minifyEnabled true
            debuggable false

            //Default proguard call
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseConfig
        }
    }

    //Format output
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            println variant

            //Rename the output apk file
            def appName = variant.mergedFlavor.resValues.get('app_name').getValue()
            def underScore = "_"
            def version = variant.versionName
            def buildType = variant.buildType.name
            def releaseApkName = appName + underScore + version + underScore + convertToCamelCase(buildType) + ".apk"
            outputFileName = releaseApkName

            // set new resVale
            variant.resValue 'string', 'app_name', appName
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}

def static String convertToCamelCase(String str) {
    if (str == null) {
        return null
    }

    boolean space = true
    StringBuilder builder = new StringBuilder(str)
    final int len = builder.length()

    for (int i = 0; i < len; ++i) {
        char c = builder.charAt(i)
        if (space) {
            if (!Character.isWhitespace(c)) {
                // Convert to title case and switch out of whitespace mode.
                builder.setCharAt(i, Character.toTitleCase(c))
                space = false
            }
        } else if (Character.isWhitespace(c)) {
            space = true
        } else {
            builder.setCharAt(i, Character.toLowerCase(c))
        }
    }

    return builder.toString()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // Android X
    implementation "androidx.appcompat:appcompat:$androidXAppCompatVersion"
    implementation "com.google.android.material:material:$materialVersion"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation "androidx.core:core-ktx:$androidXCoreKotlinLibraryVersion"

    // Menu
    implementation "com.github.skydoves:flourish:1.0.0"

    //misc
    implementation 'com.dmitrymalkovich.android:material-design-dimens:1.4'

    // Library projects
    implementation project(":library:designpattern")
    implementation project(":library:cyclemenu")
    implementation project(":library:pdialog")
    implementation project(":library:attributionpresenter")
    implementation project(":library:discreteseekbar")
    implementation project(":library:spectrum")
}